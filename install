#!/bin/bash
# WARNING: this script will destroy data on the selected disk.
# This script can be run by executing the following:
#   curl -sL https://arch-bootstrap.baraud.fr/install | bash
# See https://github.com/pierre-jean/arch-bootstrap for more info


################# GLOBAL BATCH SETTINGS #################

manage_error_during_install(){
	set -o pipefail
	trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
	### Set up logging ###
	exec 1> >(tee "stdout.log")
	exec 2> >(tee "stderr.log")
}

################# HARD DRIVE PARTITION #################


is_uefi() {
	ls /sys/firmware/efi/efivars &> /dev/null
}

get_drive_to_install(){
	devicelist=$(lsblk -dplnx size -o name,size | grep -Ev "boot|rpmb|loop" | tac)
	device=$(dialog --stdout --menu "Select disk for root" 0 0 0 ${devicelist}) || exit 1
	device_home=$(dialog --stdout --menu "Select disk for home" 0 0 0 ${devicelist}) || exit 1
}

compute_part_root_on_shared_device(){
	device_size=$(parted $device unit GiB print | grep $device | cut -d ' ' -f3 | cut -d '.' -f1)
	[[ $device_size -gt 130 ]] && root_end="60GiB" 
	[[ $device_size -le 130 ]] && root_end="40GiB" 
	[[ $device_size -le 80 ]] && root_end="20GiB" 
	[[ $device_size -le 20 ]] && root_end="50%"
}

compute_partitions_size(){
	is_uefi && uefi_size=129 || uefi_size=1
	swap_size=$(free --mebi | awk '/Mem:/ {print $2}')
	swap_end=$(( $swap_size + 1 + $uefi_size ))MiB
	root_begin=$swap_end
	[[ $device == $device_home ]] && compute_part_root_on_shared_device || root_end="100%"
	[[ $device == $device_home ]] && home_begin=$root_end || home_begin="1MiB"
	home_end="100%"
}

set_disk_label(){
	is_uefi && label="gpt" || label="msdos"
	parted --script ${device} -- mklabel "$label"
}

create_partitions(){
	is_uefi && parted --script ${device} -- mkpart ESP fat32 1MiB "$uefi_size"MiB
	parted --script ${device} -- mkpart primary linux-swap "$uefi_size"MiB "$swap_end"
	parted --script ${device} -- mkpart primary ext4 "$swap_end" "$root_end"
	parted --script ${device_home} -- mkpart primary ext4 "$home_begin" "$home_end"
	is_uefi && parted --script ${device} -- set 1 boot on || parted --script ${device} -- set 2 boot on
}

format_and_mount(){
	is_uefi && part_boot_id="^${device}p?1$" 
	is_uefi && part_swap_id="^${device}p?2$" || part_swap_id="^${device}p?1$"
	is_uefi && part_root_id="^${device}p?3$" || part_root_id="^${device}p?2$"
	if [[ "$device" == "$device_home" ]]
	then
		is_uefi && part_home_id="^${device}p?4$" || part_home_id="^${device}p?3$"
	else
		part_home_id="^${device_home}p?1$"
	fi
	part_boot="$(ls ${device}* | grep -E "$part_boot_id")"
	part_swap="$(ls ${device}* | grep -E "$part_swap_id")"
	part_root="$(ls ${device}* | grep -E "$part_root_id")"
	part_home="$(ls ${device_home}* | grep -E "$part_home_id")"
	
	is_uefi && wipefs "${part_boot}"
	wipefs "${part_swap}"
	wipefs "${part_root}"
	wipefs "${part_home}"

	is_uefi && mkfs.vfat -F32 "${part_boot}"
	mkswap "${part_swap}"
	mkfs.ext4 "${part_root}"
	$(echo -n "${password}" | cryptsetup luksFormat --batch-mode "${part_home}" -d -)
	$(echo -n "${password}" | cryptsetup open --batch-mode "${part_home}" home -d - )
	mkfs.ext4 /dev/mapper/home

	swapon "${part_swap}"
	mount "${part_root}" /mnt
	mkdir /mnt/home
	mount /dev/mapper/home /mnt/home
	is_uefi && mkdir /mnt/boot
	is_uefi && mount "${part_boot}" /mnt/boot
	return 0
}

partition_hard_drive(){
	echo "==> Begginning to partition hard drive..."
	get_drive_to_install
	set_disk_label
	compute_partitions_size
	create_partitions
	format_and_mount
	echo "==> ...Partition hard drive succeedeed"
}

################# INSTALL LINUX #################


# -------------- PACKAGES ----------------#

update_mirror_list(){
	if [[ -n "$COUNTRY" ]]
	then
		mirror_list_url="https://www.archlinux.org/mirrorlist/?country=$COUNTRY&protocol=https&use_mirror_status=on"
		pacman -Sy --noconfirm pacman-contrib
		curl -s "$mirror_list_url" | \
		    sed -e 's/^#Server/Server/' -e '/^#/d' | \
		    rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
	pacman -Sy
	fi
}

update_private_mirror(){
	if [[ -n "$PRIVATE_REPO" ]]  && [[ -n "$PRIVATE_REPO_URL" ]]
	then
		echo "[$PRIVATE_REPO]" >> /etc/pacman.conf
		echo "SigLevel = Optional TrustAll" >> /etc/pacman.conf
		echo "Server = $PRIVATE_REPO_URL" >>  /etc/pacman.conf
	fi
	pacman -Sy
}

update_repo() {
	update_mirror_list
	update_private_mirror
}

update_repo_install_linux(){
	cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
	cp /etc/pacman.conf /mnt/etc/pacman.conf
	arch-chroot /mnt pacman -Sy
}

pacstrap_base(){
	echo "==> Pacstrap base..."
	update_repo
	pacstrap /mnt base linux linux-firmware
	update_repo_install_linux
	echo "==> Pacstrap base succeeded"
}

# -------------- NETWORK ----------------#

get_hostname(){
	hostname=$(dialog --stdout --inputbox "Enter hostname" 0 0) || exit 1
	clear
	: ${hostname:?"hostname cannot be empty"}
}

set_hostname(){
	echo "==> Set Hostname ... "
	[[ -z "$hostname" ]] && get_hostname
	echo "${hostname}" > /mnt/etc/hostname
	echo "==> Set Hostname succeeded"
}

# -------------- LOCALES ----------------#

get_locale(){
	locale_list=$(cut -d '#' -f2 /etc/locale.gen)
	LOCALE=$(dialog --stdout --menu "Select locale computer" $locale_list 0 0 0  )
}

get_keyboard_layout(){
	keyboard_layout_list=$(ls /usr/share/kbd/keymaps/**/*.map.gz | sed 's:\(.*\)/\(.*\)\.map\.gz:\2 (\1):')
	KEYBOARD_LAYOUT=$(dialog --stdout --menu "Select keyboard layout" $keyboard_layout_list 0 0 0  )
}

get_timezone(){
	timezone_list=$(ls /usr/share/kbd/keymaps/**/*.map.gz | sed 's:\(.*\)/\(.*\)\.map\.gz:\2 (\1):')
	TIMEZONE=$(dialog --stdout --menu "Select a timezone" $timezone_list 0 0 0  )
}

generate_locales(){
	echo "==> Generate Locales..."
	[[ -z "$LOCALE" ]] && get_locale
	[[ -z "$KEYBOARD_LAYOUT" ]] && get_keyboard_layout
	[[ -z "$TIMEZONE" ]] && get_timezone
	echo $LOCALE >> /mnt/etc/locale.gen
	echo $KEYBOARD_LAYOUT >> /mnt/etc/vconsole.conf
	[[ -n "$XKB_LAYOUT" ]] && arch-chroot /mnt localectl set-x11-keymap $XKB_LAYOUT
	arch-chroot /mnt ln -sf "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
	arch-chroot /mnt locale-gen
	arch-chroot /mnt hwclock --systohc
	loadkeys $KEYBOARD_LAYOUT
	echo "==> Generate Locales succeeded"
}


# -------------- USER ----------------#

get_username(){
	user=$(dialog --stdout --inputbox "Enter admin username" 0 0) || exit 1
	clear
	: ${user:?"user cannot be empty"}
}

get_password(){
	message="Please enter admin password"
	while [[ -z "$password" ]]  || [[ -z "$password2" ]] || [[ "$password" != "$password2" ]]; do
		password=$(dialog --stdout --passwordbox "$message" 0 0) || exit 1
		clear
		: ${password:?"password cannot be empty"}
		password2=$(dialog --stdout --passwordbox "Enter admin password again" 0 0) || exit 1
		clear
		message="Password cannot be empty and need to match. Try again:"
	done
}

add_user(){
	echo "==> Add user..."
	[[ -z "$user" ]] && get_username
	[[ -z "$password" ]] && get_password
	[[ -z "$MAIN_SHELL" ]] && MAIN_SHELL="/bin/sh"
	arch-chroot /mnt useradd -mU -s "$MAIN_SHELL" -G wheel,uucp,video,audio,storage,games,input "$user"
	arch-chroot /mnt chsh -s $MAIN_SHELL
	echo "$user ALL=(ALL:ALL) ALL" >> /mnt/etc/sudoers
	echo "$user:$password" | chpasswd --root /mnt
	echo "root:$password" | chpasswd --root /mnt
	echo "==> Add user succeeded"
}

# -------------- PACKAGES --------------#


install_packages(){
	echo "==> Install packages..."
	[[ -n "$PRIVATE_PACKAGES" ]] && arch-chroot /mnt pacman -Sy --noconfirm $PRIVATE_PACKAGES
	echo "==> Install packages succeeded"
}


# -------------- CONFIG ----------------#


get_remote_credentials(){
	remote_user=$(dialog --stdout --inputbox "Enter the user for $REMOTE" 0 0) || exit 1
	message="Please enter the password for $remote_user on $REMOTE"
	while [[ -z "$remote_password" ]]  || [[ -z "$remote_password_confirm" ]] || [[ "$remote_password" != "$remote_password_confirm" ]]; do
		remote_password=$(dialog --stdout --passwordbox "$message" 0 0) || exit 1
		clear
		: ${remote_password:?"password cannot be empty"}
		remote_password_confirm=$(dialog --stdout --passwordbox "Enter the password again" 0 0) || exit 1
		clear
		message="Password for $REMOTE cannot be empty and need to match. Try again:"
	done
}

ssh_generate_keys(){
	mkdir -p /mnt/home/$user/.local/share/ssh
	ssh-keygen -C "$user@$hostname" -qN $password -f /mnt/home/$user/.local/share/ssh/id_rsa
	arch-chroot /mnt chown --recursive $user:$user /home/$user/.local 
}

ssh_deploy_on_remote(){
	if [[ -n "$REMOTE" ]]
	then
		[[ -z "$remote_user" ]] && get_remote_credentials
		pacman -Sy --noconfirm sshpass
		sshpass -p$remote_password ssh-copy-id -o StrictHostKeyChecking=no -i /mnt/home/$user/.local/share/ssh/id_rsa $remote_user@$REMOTE
	fi
}

ssh_deploy(){
	ssh_generate_keys
	ssh_deploy_on_remote
}


# --------------- BOOTLOADER ------------#

install_bootloader_uefi(){
       arch-chroot /mnt bootctl install
       echo "default arch" > /mnt/boot/loader/loader.conf
       echo "title    Arch Linux" > /mnt/boot/loader/entries/arch.conf
       echo "linux    /vmlinuz-linux" >> /mnt/boot/loader/entries/arch.conf
       echo "initrd   /initramfs-linux.img" >> /mnt/boot/loader/entries/arch.conf
       echo "options  root=PARTUUID=$(blkid -s PARTUUID -o value "$part_root") rw" >> /mnt/boot/loader/entries/arch.conf
}

install_bootloader_bios(){
	arch-chroot /mnt pacman -Sy --noconfirm grub
	arch-chroot /mnt grub-install --target=i386-pc "$device"
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
}

generate_fstab(){
	part_home_name=$( echo $part_home | cut -d '/' -f3 )
	home_uuid=$( lsblk -ro NAME,UUID ${device_home} | grep "${part_home_name}" | cut -d ' ' -f2 )
	echo "home	UUID=${home_uuid}	 none	luks" >> /mnt/etc/crypttab
	genfstab -t PARTUUID /mnt >> /mnt/etc/fstab
}

install_bootloader(){
	echo "==> Install bootloader ..."
	generate_fstab
	is_uefi && install_bootloader_uefi || install_bootloader_bios
	echo "==> Install bootloader succeeded"
}

# -------------- INSTALL ----------------#

get_all_input(){
	[[ -z "$LOCALE" ]] && get_locale
	[[ -z "$KEYBOARD_LAYOUT" ]] && get_keyboard_layout
	loadkeys $KEYBOARD_LAYOUT
	[[ -z "$TIMEZONE" ]] && get_timtimezone
	[[ -z "$user" ]] && get_username
	[[ -z "$password" ]] && get_password
	[[ -z "$hostname" ]] && get_hostname
	[[ -z "$remote_user" ]] && get_remote_credentials
}

manage_error_during_install
get_all_input 
partition_hard_drive 
pacstrap_base
generate_locales 
set_hostname 
install_packages 
install_bootloader
add_user 
ssh_deploy
echo "Installation complete, check logs for more info"
